#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = 'Synthetic Ocean AI - Team'
__email__ = 'syntheticoceanai@gmail.com'
__version__ = '{1}.{0}.{1}'
__initial_data__ = '2022/06/01'
__last_update__ = '2025/03/29'
__credits__ = ['Synthetic Ocean AI']

# MIT License
#
# Copyright (c) 2025 Synthetic Ocean AI
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

try:
    import sys
    import numpy

    from Engine.Models.Adversarial.VanillaGenerator import VanillaGenerator
    from Engine.Models.Adversarial.VanillaDiscriminator import VanillaDiscriminator

except ImportError as error:
    print(error)
    sys.exit(-1)


DEFAULT_ADVERSARIAL_LATENT_DIMENSION = 128
DEFAULT_ADVERSARIAL_INTERMEDIARY_ACTIVATION = "LeakyReLU"
DEFAULT_ADVERSARIAL_LAST_ACTIVATION_LAYER = "Sigmoid"
DEFAULT_ADVERSARIAL_DROPOUT_DECAY_RATE_G = 0.2
DEFAULT_ADVERSARIAL_DROPOUT_DECAY_RATE_D = 0.4
DEFAULT_ADVERSARIAL_INITIALIZER_MEAN = 0.0
DEFAULT_ADVERSARIAL_INITIALIZER_DEVIATION = 0.5
DEFAULT_ADVERSARIAL_DENSE_LAYERS_SETTINGS_G = [128]
DEFAULT_ADVERSARIAL_DENSE_LAYERS_SETTINGS_D = [128]


class AdversarialModel(VanillaGenerator, VanillaDiscriminator):
    """
      AdversarialModel

      Combines a generator and a discriminator in a unified adversarial model, inheriting
      from `VanillaGenerator` and `VanillaDiscriminator` classes. This class allows for
      seamless integration of both models in a Generative Adversarial Network (GAN) framework,
      with methods for initializing, configuring, and interacting with the generator and
      discriminator networks.

      Attributes:
          @latent_dimension (int):
              Dimensionality of the latent space used by the generator.
          @output_shape (int):
              Shape of the output generated by the generator and evaluated by the discriminator.
          @activation_function (str):
              Activation function applied to intermediate layers.
          @initializer_mean (float):
              Mean of the normal distribution used for weight initialization.
          @initializer_deviation (float):
              Standard deviation of the normal distribution used for weight initialization.
          @dropout_decay_rate_g (float):
              Dropout decay rate applied to the generator layers.
          @dropout_decay_rate_d (float):
              Dropout decay rate applied to the discriminator layers.
          @last_layer_activation (str):
              Activation function used for the last layer of both generator and discriminator.
          @dense_layer_sizes_g (list):
              List of integers specifying the number of units per dense layer in the generator.
          @dense_layer_sizes_d (list):
              List of integers specifying the number of units per dense layer in the discriminator.
          @dataset_type (type):
              Data type used for input data (default: numpy.float32).
          @number_samples_per_class (dict | None):
              Optional dictionary containing the number of samples per class, if applicable.

      Raises:
          ValueError:
              Raised if invalid arguments are provided, such as:
              - Non-positive `latent_dimension`
              - Dropout rates outside the range [0, 1]
              - Empty or invalid `dense_layer_sizes_g` or `dense_layer_sizes_d`
              - Missing required key "number_classes" in `number_samples_per_class`, if provided

      Example:
          >>> model = AdversarialModel(
          ...     latent_dimension=100,
          ...     output_shape=28,
          ...     activation_function='relu',
          ...     initializer_mean=0.0,
          ...     initializer_deviation=0.02,
          ...     dropout_decay_rate_g=0.3,
          ...     dropout_decay_rate_d=0.3,
          ...     last_layer_activation='sigmoid',
          ...     dense_layer_sizes_g=[512, 256],
          ...     dense_layer_sizes_d=[512, 256],
          ...     dataset_type=numpy.float32,
          ...     number_samples_per_class={"number_classes": 10}
          ... )
          >>> model.build()  # Example method call if present
      """

    def __init__(self,
                 latent_dimension: int =DEFAULT_ADVERSARIAL_LATENT_DIMENSION,
                 output_shape: int = 128,
                 activation_function: str = DEFAULT_ADVERSARIAL_INTERMEDIARY_ACTIVATION,
                 initializer_mean: float = DEFAULT_ADVERSARIAL_INITIALIZER_MEAN,
                 initializer_deviation: float = DEFAULT_ADVERSARIAL_INITIALIZER_DEVIATION,
                 dropout_decay_rate_g: float = DEFAULT_ADVERSARIAL_DROPOUT_DECAY_RATE_G,
                 dropout_decay_rate_d: float = DEFAULT_ADVERSARIAL_DROPOUT_DECAY_RATE_D,
                 last_layer_activation: str = DEFAULT_ADVERSARIAL_LAST_ACTIVATION_LAYER,
                 dense_layer_sizes_g = None,
                 dense_layer_sizes_d = None,
                 dataset_type: type = numpy.float32,
                 number_samples_per_class: dict | None = None):
        """
        Initializes the AdversarialModel by constructing both the generator and discriminator networks.

        Args:
            latent_dimension (int):
                Dimensionality of the latent space used by the generator.
            output_shape (int):
                Shape of the generated output.
            activation_function (str):
                Activation function applied to all hidden layers.
            initializer_mean (float):
                Mean of the normal distribution for weight initialization.
            initializer_deviation (float):
                Standard deviation of the normal distribution for weight initialization.
            dropout_decay_rate_g (float):
                Dropout decay rate applied to the generator layers.
            dropout_decay_rate_d (float):
                Dropout decay rate applied to the discriminator layers.
            last_layer_activation (str):
                Activation function for the last layer of both models.
            dense_layer_sizes_g (list):
                List of integers specifying the number of units per dense layer in the generator.
            dense_layer_sizes_d (list):
                List of integers specifying the number of units per dense layer in the discriminator.
            dataset_type (type, optional):
                Data type of the input dataset (default: numpy.float32).
            number_samples_per_class (dict | None, optional):
                Optional dictionary containing metadata about the number of samples per class.
                If provided, it must include the key "number_classes".

        Raises:
            ValueError:
                If `latent_dimension` is non-positive.
                If `dropout_decay_rate_g` or `dropout_decay_rate_d` is not within [0, 1].
                If `dense_layer_sizes_g` or `dense_layer_sizes_d` is empty or invalid.
                If `number_samples_per_class` is provided but does not contain the key "number_classes".
        """

        if dense_layer_sizes_d is None:
            dense_layer_sizes_d = DEFAULT_ADVERSARIAL_DENSE_LAYERS_SETTINGS_D

        if dense_layer_sizes_g is None:
            dense_layer_sizes_g = DEFAULT_ADVERSARIAL_DENSE_LAYERS_SETTINGS_G

        # Initialize generator and discriminator using parent class constructors
        VanillaGenerator.__init__(self,
                                  latent_dimension,
                                  output_shape,
                                  activation_function,
                                  initializer_mean,
                                  initializer_deviation,
                                  dropout_decay_rate_g,
                                  last_layer_activation,
                                  dense_layer_sizes_g,
                                  dataset_type,
                                  number_samples_per_class)

        VanillaDiscriminator.__init__(self,
                                      latent_dimension,
                                      output_shape,
                                      activation_function,
                                      initializer_mean,
                                      initializer_deviation,
                                      dropout_decay_rate_d,
                                      last_layer_activation,
                                      dense_layer_sizes_d,
                                      dataset_type,
                                      number_samples_per_class)


    def get_dense_generator_model(self):
        """
        Returns the generator's dense model.

        Returns:
            Model: The dense model of the generator.
        """
        return self._generator_model_dense

    def get_dense_discriminator_model(self):
        """
        Returns the discriminator's dense model.

        Returns:
            Model: The dense model of the discriminator.
        """
        return self._discriminator_model_dense

    def set_latent_dimension(self, latent_dimension):
        """
        Sets the latent dimension for both the generator and discriminator.

        Args:
            latent_dimension (int): New latent dimension value.
        """
        self._generator_latent_dimension = latent_dimension
        self._discriminator_latent_dimension = latent_dimension

    def set_output_shape(self, output_shape):
        """
        Sets the output shape for both the generator and discriminator.

        Args:
            output_shape (int): New output shape value.
        """
        self._generator_output_shape = output_shape
        self._discriminator_output_shape = output_shape

    def set_activation_function(self, activation_function):
        """
        Sets the activation function for both the generator and discriminator.

        Args:
            activation_function (str): New activation function.
        """
        self._generator_activation_function = activation_function
        self._discriminator_activation_function = activation_function

    def set_last_layer_activation(self, last_layer_activation):
        """
        Sets the last layer activation function for both the generator and discriminator.

        Args:
            last_layer_activation (str): New activation function for the last layer.
        """
        self._generator_last_layer_activation = last_layer_activation
        self._discriminator_last_layer_activation = last_layer_activation

    def set_dataset_type(self, dataset_type):
        """
        Sets the dataset type for both the generator and discriminator.

        Args:
            dataset_type (type): New dataset type.
        """
        self._generator_dataset_type = dataset_type
        self._discriminator_dataset_type = dataset_type

    def set_initializer_mean(self, initializer_mean):
        """
        Sets the initializer mean for both the generator and discriminator.

        Args:
            initializer_mean (float): New mean for parameter initialization.
        """
        self._generator_initializer_mean = initializer_mean
        self._discriminator_initializer_mean = initializer_mean

    def set_initializer_deviation(self, initializer_deviation):
        """
        Sets the initializer deviation for both the generator and discriminator.

        Args:
            initializer_deviation (float): New deviation for parameter initialization.
        """
        self._generator_initializer_deviation = initializer_deviation
        self._discriminator_initializer_deviation = initializer_deviation
